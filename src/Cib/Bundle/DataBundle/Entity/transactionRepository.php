<?php

namespace Cib\Bundle\DataBundle\Entity;

use Cib\Bundle\ActivityBundle\Entity\Store;
use Cib\Bundle\ActivityBundle\Entity\Tpe;
use Cib\Bundle\CustomerBundle\Entity\Card;
use Cib\Bundle\CustomerBundle\Entity\Client;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * transactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class transactionRepository extends EntityRepository
{

    public function getAjaxTransactions(EntityManager $em,Card $card = null,Client $client = null,$dateStart = null, $dateStop = null,Store $store = null,$month = null)
    {
        $where = null;
        if(($card != '' && $card != 0) || ($client != '' && $client != 0) || ($dateStart != '' /*&& $dateStart == DateTime::CLASS_CONSTRAINT*/) || ($dateStop!= '' /*&& $dateStop == DateTime::CLASS_CONSTRAINT*/) || ($store != '' && $store != 0) || ($month!= '' && $month != 0) )
            $where = "WHERE";

        $dql = "SELECT t FROM CibDataBundle:Transaction t ";
        $dateNow = new \DateTime();
        if($where)
        {
            $dql = $dql.$where;
            if($card != '')
                $dql = $dql." t.card = ".$card->getCardId();
            if($client != '')
            {
                if($card != '')
                    $dql = $dql." AND";
                $dql = $dql." t.client = ".$client->getClientId();
            }
            if($dateStart && $dateStop == '')
            {
                if($card || $client)
                    $dql = $dql." AND";
                $dql = $dql." t.dateTransaction BETWEEN '".$dateStart->format('Y-m-d')."' AND '".$dateNow->format('Y-m-d')."'";
            }
            elseif($dateStop && $dateStart == '')
            {
                if($card || $client)
                    $dql = $dql." AND";
                $dql = $dql." t.dateTransaction <= '".$dateStop->format('Y-m-d')."'";
            }
            elseif($dateStart != '' && $dateStop != '')
            {
                if($card || $client)
                    $dql = $dql." AND";
                $dql = $dql." t.dateTransaction BETWEEN '".$dateStart->format('Y-m-d')."' AND '".$dateStop->format('Y-m-d')."'";
            }
            if($store)
            {
                if($card || $client || $dateStop || $dateStart)
                    $dql = $dql." AND";
                $dql = $dql." t.store = ".$store->getStoreId();
            }
            if($month)
            {
                $month = date('Y').'-'.$month.'%';
                if($card || $client || $dateStop || $dateStart || $store)
                    $dql = $dql." AND";
                $dql = $dql." t.dateTransaction LIKE '".$month."'";
            }


        }
        $query = $em->createQuery($dql);
        return $query->getResult();
    }

    public function getAjaxEnclose(EntityManager $em,$stores,$date = null)
    {
        $arrayEnclose = new ArrayCollection();
        if($date)
            $dateEnclose = new \DateTime($date);
        else
            $dateEnclose = new \DateTime();


        if($stores)
        {
            foreach($stores as $store)
            {
                $tempStore = $em->getRepository('CibActivityBundle:Store')->find($store);
                $enclose = new Enclose();
                $enclose->setStore($tempStore);

                $dql = "SELECT t.dateTransaction FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.isEnclosed = false AND t.dateTransaction <= '".$dateEnclose->format('Y-m-d')."' order by t.dateTransaction ASC";

                $query = $em->createQuery($dql);
                $result = $query->getArrayResult();
                foreach($result as $test)
                {
                    $dateStart = new \DateTime($test['dateTransaction']->format('Y-m-d'));
                    $enclose->setDateStartEnclose($dateStart);
                    break;
                }

                $dql = "SELECT SUM(t.amountTransaction) FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.typeTransaction = 'D' AND t.isVipTransaction = false AND t.isEnclosed = false AND t.dateTransaction <= '".$dateEnclose->format('Y-m-d')."'";
                $query = $em->createQuery($dql);
                $enclose->setTotalDebit($query->getSingleScalarResult());

                $dql = "SELECT SUM(t.amountTransaction) as sumCredit ,SUM(t.primeTransaction) as sumPrime FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.typeTransaction = 'C' AND t.isVipTransaction = false AND t.isEnclosed = false AND t.dateTransaction <= '".$dateEnclose->format('Y-m-d')."'";
                $query = $em->createQuery($dql);
                $result = $query->getSingleResult();
                $enclose->setTotalCredit($result['sumCredit']);
                $enclose->setTotalPrime($result['sumPrime']);

                $dql = "SELECT SUM(t.amountTransaction) as sumVip, SUM(t.primeTransaction) as sumPrime FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.typeTransaction = 'C' AND t.isVipTransaction = true AND t.isEnclosed = false AND t.dateTransaction <= '".$dateEnclose->format('Y-m-d')."'";
                $query = $em->createQuery($dql);
                $result = $query->getSingleResult();
                $enclose->setTotalVip($result['sumVip']);
                $enclose->setTotalPrime($enclose->getTotalPrime()+$result['sumPrime']);
                $enclose->setTotalBalance($enclose->getTotalCredit()-$enclose->getTotalDebit());
                $enclose->setDateStopEnclose($dateEnclose->format('Y-m-d'));

                $historyEnclose = $em->getRepository('CibActivityBundle:Store')->find($enclose->getStore()->getStoreId());


                if($historyEnclose->getEnclose()->last())
                {
                    $enclose->setLastEnclose($historyEnclose->getEnclose()->last());
                    if($enclose->getDateStartEnclose() && ($enclose->getDateStartEnclose()->format('Y-m-d') <= ($enclose->getLastEnclose()->getDateStopEnclose()->format('Y-m-d'))))
                    {
                        $dql = "SELECT SUM(t.amountTransaction) FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.typeTransaction = 'D' AND t.isVipTransaction = false AND t.isEnclosed = false AND t.dateTransaction <= '".$enclose->getLastEnclose()->getDateStopEnclose()->format('Y-m-d')."'";
                        $query = $em->createQuery($dql);
                        $enclose->setAmountWarningDebit($query->getSingleScalarResult());

                        $dql = "SELECT SUM(t.amountTransaction) as sumCredit ,SUM(t.primeTransaction) as sumPrime FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.typeTransaction = 'C' AND t.isVipTransaction = false AND t.isEnclosed = false AND t.dateTransaction <= '".$enclose->getLastEnclose()->getDateStopEnclose()->format('Y-m-d')."'";
                        $query = $em->createQuery($dql);
                        $result = $query->getSingleResult();
                        $enclose->setAmountWarningCredit($result['sumCredit']);
                        $enclose->setAmountWarningPrime($result['sumPrime']);

                        $dql = "SELECT SUM(t.amountTransaction) as sumVip, SUM(t.primeTransaction) as sumPrime FROM CibDataBundle:Transaction t WHERE t.store = ".$tempStore->getStoreId()." AND t.typeTransaction = 'C' AND t.isVipTransaction = true AND t.isEnclosed = false AND t.dateTransaction <= '".$enclose->getLastEnclose()->getDateStopEnclose()->format('Y-m-d')."'";
                        $query = $em->createQuery($dql);
                        $result = $query->getSingleResult();
                        $enclose->setAmountWarningVip($result['sumVip']);
                        $enclose->setAmountWarningPrime($enclose->getAmountWarningPrime()+$result['sumPrime']);
                        $enclose->setAmountWarningBalance($enclose->getAmountWarningCredit()-$enclose->getAmountWarningDebit());
                    }
                }

                $arrayEnclose->add($enclose);

            }
        }
        return $arrayEnclose;



    }

    public function encloseOneStore(EntityManager $em,$storeId,$debit,$credit,$vip,$prime,$balance,$historic,$real,$dateStart,$dateStop)
    {
        $store = $em->getRepository('CibActivityBundle:Store')->find($storeId);
        $repoData = $em->getRepository('CibDataBundle:Enclose');
        $lastEnclose = $repoData->find($historic);
        $enclose = new Enclose();
        $dateStopEnclose = new \DateTime($dateStop);
        $dateStartEnclose = new \DateTime($dateStart);
        $enclose->setDateStopEnclose($dateStopEnclose);
        $enclose->setDateStartEnclose($dateStartEnclose);
        $enclose->setStore($store);
        $enclose->setLastEnclose($lastEnclose);
        $enclose->setTotalCredit($credit);
        $enclose->setTotalVip($vip);
        $enclose->setTotalDebit($debit);
        $enclose->setTotalPrime($prime);
        $enclose->setTotalBalance($balance);

        $dql = "SELECT t FROM CibDataBundle:Transaction t WHERE t.store = ".$store->getStoreId()." AND t.isEnclosed = false AND t.dateTransaction <= '".$dateStopEnclose->format('Y-m-d')."'";
        $query = $em->createQuery($dql);
        $transactions = $query->getResult();
        foreach($transactions as $transaction)
        {
            $enclose->addTransaction($transaction);
            $em->persist($transaction);
        }

        $em->persist($enclose);
        try
        {
            $em->flush();
            return true;
        }
        catch(\Doctrine\DBAL\DBALException $e)
        {
            return false;
        }


    }
}
